{"version":3,"sources":["Inputs.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["nextUniqueId","useUniqueId","useState","Input","props","id","className","htmlFor","label","type","value","onChange","e","target","undefined","comment","helixDrill","gCode","diameter","feed","depth","push","z","toggle","zOld","delta","MainPage","history","useHistory","location","useLocation","query","queryString","parse","search","args","columns","columnSpacing","rows","rowSpacing","fastFeed","toolDiameter","holeDepth","holeDiameter","plateDepth","plateDiameter","safeZ","JSON","decodeURIComponent","updateArgs","x","replace","pathname","encodeURIComponent","stringify","func","row","column","iterateHoles","dStart","dEnd","increment","d","dOld","growCircle","gCodeText","join","Fragment","p","parseInt","parseFloat","Button","onClick","navigator","clipboard","writeText","blob","Blob","saveAs","App","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.40c1b6a5.chunk.js","sourcesContent":["import { useState } from 'react';\nlet nextUniqueId: number = 0;\nfunction useUniqueId() {\n    const [id] = useState(() => '' + (nextUniqueId++));\n    return id;\n}\n\ninterface InputCheckProps {\n    style?: React.CSSProperties\n    label: string;\n    value: boolean;\n    onChange: (value: boolean) => void\n}\nexport function InputCheck(props: InputCheckProps) {\n    const id = useUniqueId();\n    return <div className=\"form-check\" style={props.style}>\n        <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id={id} checked={props.value} onChange={e => props.onChange(e.target.checked)} />\n        <label className=\"form-check-label\" htmlFor={id}>\n            {props.label}\n        </label>\n    </div>\n}\n\ninterface InputProps {\n    type: 'number' | 'text',\n    label: string,\n    value: string,\n    comment?: string,\n    onChange: (value: string) => void\n}\n\nexport function Input(props: InputProps) {\n    const id = useUniqueId();\n    return <div className=\"form-group\">\n        <label htmlFor={id}>{props.label}</label>\n        <input type={props.type} className=\"form-control\" id={id} value={props.value} onChange={e => props.onChange(e.target.value)} />\n        {props.comment === undefined ? null :\n            <small className=\"form-text text-muted\">{props.comment}</small>\n        }\n    </div>;\n}","import React from 'react';\nimport queryString from 'query-string';\nimport Button from 'react-bootstrap/Button';\nimport { BrowserRouter as Router, Route, useHistory, useLocation } from \"react-router-dom\";\nimport './App.scss';\nimport { Input } from './Inputs';\nimport { saveAs } from 'file-saver';\n\ninterface Arguments {\n  columns: number\n  columnSpacing: number\n  rows: number\n  rowSpacing: number\n\n  fastFeed: number\n  feed: number\n\n  toolDiameter: number\n\n  holeDepth: number\n  holeDiameter: number\n\n  plateDepth: number\n  plateDiameter: number\n\n  safeZ: number\n}\n\n\nfunction helixDrill(gCode: String[], diameter: number, feed: number, depth: number) {\n  gCode.push(\"G91\"); // relative positioning\n  gCode.push(\"G0 X\" + diameter / 2); // move to starting point\n\n  // spiral down\n  let z = 0;\n  let toggle = -1;\n  while (z < depth) {\n    const zOld = z;\n    z += feed / 2;\n    if (z > depth)\n      z = depth;\n    const delta = zOld - z;\n\n    gCode.push(\"G02 X\" + (toggle * diameter) + \"Z\" + delta + \" I\" + (toggle * diameter / 2));\n    toggle *= -1;\n  }\n\n  // final circle\n  gCode.push(\"G02 X\" + (toggle * diameter) + \" I\" + (toggle * diameter / 2));\n  gCode.push(\"G02 X\" + (-toggle * diameter) + \" I\" + (-toggle * diameter / 2));\n\n  gCode.push(\"G1 X\" + (toggle * diameter / 2)); // back to center\n  gCode.push(\"G90\"); // absolute positioning\n}\n\nfunction growCircle(gCode: String[], dStart: number, dEnd: number, increment: number) {\n  gCode.push(\"G91\"); // relative positioning\n  gCode.push(\"G1 X\" + dStart / 2); // move to starting point\n\n  // spiral out\n  let d = dStart;\n  while (true) {\n    gCode.push(\"G02 X\" + (-d) + \" I\" + (-d / 2));\n    gCode.push(\"G02 X\" + (d) + \" I\" + (d / 2));\n    if (d >= dEnd)\n      break;\n    const dOld = d;\n    d += increment;\n    if (d > dEnd)\n      d = dEnd;\n    gCode.push(\"G1 X\" + ((d - dOld) / 2)); // move out\n\n  }\n\n  gCode.push(\"G1 X\" + (-dEnd / 2)); // back to center\n  gCode.push(\"G90\"); // absolute positioning\n}\n\nfunction MainPage() {\n  const history = useHistory();\n  const location = useLocation();\n  const query = queryString.parse(location.search);\n  const args: Arguments = query.args === undefined ? {\n    columns: 10,\n    columnSpacing: 50,\n    rows: 10,\n    rowSpacing: 50,\n    feed: 100,\n    fastFeed: 1000,\n\n    toolDiameter: 6,\n    holeDepth: 22.5,\n    holeDiameter: 7,\n    plateDepth: 2,\n    plateDiameter: 22,\n    safeZ: 5,\n  } : JSON.parse(decodeURIComponent(query.args as any)) as Arguments;\n  const updateArgs = (x: Partial<Arguments>) => history.replace(location.pathname + \"?args=\" + encodeURIComponent(JSON.stringify({ ...args, ...x })));\n\n  const iterateHoles = (func: (column: number, row: number) => void) => {\n    for (let row = 0; row < args.rows; row++) {\n      for (let column = 0; column < args.columns; column++) {\n        func(column, row);\n      }\n      row++;\n      if (row < args.rows) {\n        for (let column = args.columns - 1; column >= 0; column--) {\n          func(column, row);\n        }\n\n      }\n    }\n  }\n\n  const gCode: String[] = [];\n  gCode.push(\"G90\"); // absolute positioning\n  gCode.push(\"G21\"); // mm\n  gCode.push(\"G17\"); // xy plane selection\n\n  gCode.push('G0 F' + args.fastFeed);\n  gCode.push('G1 F' + args.feed);\n  gCode.push('G0 Z' + args.safeZ); // move to safe height\n\n  iterateHoles((column, row) => {\n    gCode.push(\"G0 X\" + column * args.columnSpacing + \" Y\" + row * args.rowSpacing); // go to center of hole\n    helixDrill(gCode, args.toolDiameter - 0.1, 1, args.plateDepth + args.safeZ); // drill to plate height\n    growCircle(gCode, args.toolDiameter - 0.1 + args.toolDiameter, args.plateDiameter - args.toolDiameter, args.toolDiameter); // make room for plate\n    helixDrill(gCode, args.holeDiameter - args.toolDiameter, 1, args.holeDepth - args.plateDepth); // drill hole\n    gCode.push(\"G0 Z0\"); // back to Z0\n    { // take care of brims\n      const d = (args.plateDiameter);\n      gCode.push(\"G91\"); // relative positioning\n      gCode.push(\"G1 X\" + d / 2);\n      gCode.push(\"G2 X-\" + d + \" I-\" + d / 2); // take care of brims\n      gCode.push(\"G2 X\" + d + \" I\" + d / 2); // take care of brims\n      gCode.push(\"G90\"); // absolute positioning\n    }\n\n    gCode.push(\"G0 Z\" + args.safeZ);\n  });\n\n  const gCodeText = gCode.join('\\n');\n\n  return <React.Fragment>\n    <h1> Arguments </h1>\n    <Input type=\"number\" label=\"Columns\" value={'' + args.columns} onChange={p => updateArgs({ columns: parseInt(p) })} />\n    <Input type=\"number\" label=\"Column Spacing [mm]\" value={'' + args.columnSpacing} onChange={p => updateArgs({ columnSpacing: parseFloat(p) })} />\n    <Input type=\"number\" label=\"rows\" value={'' + args.rows} onChange={p => updateArgs({ rows: parseInt(p) })} />\n    <Input type=\"number\" label=\"Row Spacing [mm]\" value={'' + args.rowSpacing} onChange={p => updateArgs({ rowSpacing: parseFloat(p) })} />\n    <Input type=\"number\" label=\"Feed\" value={'' + args.feed} onChange={p => updateArgs({ feed: parseFloat(p) })} />\n    <Input type=\"number\" label=\"Fast Feed\" value={'' + args.fastFeed} onChange={p => updateArgs({ fastFeed: parseFloat(p) })} />\n\n    <Input type=\"number\" label=\"Tool Diameter [mm]\" value={'' + args.toolDiameter} onChange={p => updateArgs({ toolDiameter: parseFloat(p) })} />\n    <Input type=\"number\" label=\"Hole Depth [mm]\" value={'' + args.holeDepth} onChange={p => updateArgs({ holeDepth: parseFloat(p) })} />\n    <Input type=\"number\" label=\"Hole Diameter [mm]\" value={'' + args.holeDiameter} onChange={p => updateArgs({ holeDiameter: parseFloat(p) })} />\n    <Input type=\"number\" label=\"Plate Depth [mm]\" value={'' + args.plateDepth} onChange={p => updateArgs({ plateDepth: parseFloat(p) })} />\n    <Input type=\"number\" label=\"PlateDiameter [mm]\" value={'' + args.plateDiameter} onChange={p => updateArgs({ plateDiameter: parseFloat(p) })} />\n    <Input type=\"number\" label=\"SafeZ [mm]\" value={'' + args.safeZ} onChange={p => updateArgs({ safeZ: parseFloat(p) })} />\n\n    <h1> G Code</h1>\n    <Button onClick={() => {\n      navigator.clipboard.writeText(gCodeText);\n    }}>Copy</Button>{' '}\n    <Button onClick={() => {\n      const blob = new Blob([gCodeText], { type: 'text/plain;charset=utf-8' });\n      saveAs(blob, 'wasteboard.nc');\n    }}>Save</Button>\n    <pre id=\"gcode\">\n      {gCodeText}\n    </pre>\n  </React.Fragment>\n}\n\nfunction App() {\n  return <Router>\n    <Route component={MainPage} />\n  </Router>\n\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}